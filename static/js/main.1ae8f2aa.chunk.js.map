{"version":3,"sources":["logic.js","components/Grid.js","components/Rules.js","App.js","serviceWorker.js","index.js"],"names":["ctx","rules","steps","grid","c","x","width","y","height","d","start","_rules","_canvas","getContext","i","j","initGrid","go","document","getElementById","innerHTML","currentCell","color","dir","fillStyle","fillRect","setTimeout","Grid","canvas","this","refs","props","react_default","a","createElement","className","id","ref","onClick","pause","startStopText","reset","Component","Rules","Object","keys","map","rule","style","backgroundColor","toggle","App","state","white","red","yellow","blue","orange","green","purple","running","objectSpread","_this","setState","components_Grid","components_Rules","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1ae8f2aa.chunk.js","sourcesContent":["\nlet ctx;\nconst width = 500;\nconst height = 500;\nlet steps = 0;\nconst grid = [];\nconst size = 1;\nlet c = {\n  x: width / size / 2,\n  y: height / size / 2,\n  d: \"up\"\n};\nlet rules;\n\nconst initGrid = () => {\n  for (let i = 0; i < height; i++) {\n    grid[i] = [];\n    for (let j = 0; j < height; j++) {\n      grid[i][j] = \"white\";\n    }\n  }\n};\n\nconst go = () => {\n  if (steps > 10000000) return;\n  if (!grid[c.x] || !grid[c.x][c.y]) return;\n  steps++;\n  document.getElementById(\"steps\").innerHTML = steps;\n  // console.log(steps);\n  const currentCell = grid[c.x][c.y];\n  const color = rules[currentCell].color;\n  grid[c.x][c.y] = color;\n  const dir = rules[currentCell].dir;\n  ctx.fillStyle = color;\n  ctx.fillRect(c.x*size, c.y*size, size, size);\n  if (c.d === \"up\") {\n    if (dir === \"left\") {\n      c.x--;\n      c.d = \"left\";\n    } else {\n      c.x++;\n      c.d = \"right\";\n    }\n  } else if (c.d === \"down\") {\n    if (dir === \"left\") {\n      c.x++;\n      c.d = \"right\";\n    } else {\n      c.x--;\n      c.d = \"left\";\n    }\n  } else if (c.d === \"left\") {\n    if (dir === \"left\") {\n      c.y++;\n      c.d = \"down\";\n    } else {\n      c.y--;\n      c.d = \"up\";\n    }\n  } else {\n    if (dir === \"left\") {\n      c.y--;\n      c.d = \"up\";\n    } else {\n      c.y++;\n      c.d = \"down\";\n    }\n  }\n  if (steps % 1000 === 0) {\n    setTimeout(go, 1);\n  } else {\n    go();\n  }\n  \n};\n\nconst drawGrid = () => {\n  ctx.beginPath();\n  ctx.moveTo(0, 0);\n  for (let i = 0; i < height; i += size) {\n    ctx.moveTo(i, 0);\n    ctx.lineTo(i, height);\n  }\n\n  for (let j = 0; j < width; j += size) {\n    ctx.moveTo(0, j);\n    ctx.lineTo(width, j);\n  }\n  ctx.closePath();\n  ctx.fillStyle = \"rgb(0,0,0,1)\";\n  ctx.stroke();\n};\n\n// drawGrid();\nconst start = (_rules, _canvas) => {\n  ctx = _canvas.getContext(\"2d\");\n  rules = _rules;\n  initGrid();\n  go();\n}\n\nexport default start;","import React, { Component } from \"react\";\nimport start from \"../logic\";\n\nclass Grid extends Component {\n  componentDidMount() {\n    const canvas = this.refs.canvas;\n    start(this.props.rules, canvas);\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"Grid\">\n          <div>\n            steps:\n            <span id=\"steps\" />\n          </div>\n          <canvas ref=\"canvas\" width=\"500\" height=\"500\" />\n        </div>\n        <button onClick={this.props.pause}>{this.props.startStopText}</button>\n        <button onClick={this.props.reset}>Reset</button>\n      </div>\n    );\n  }\n}\n\nexport default Grid;\n","import React from \"react\";\n\nconst Rules = props => {\n  return (\n    <div className=\"Rules\">\n      <h1>Rules</h1>\n      {Object.keys(props.rules).map(rule => (\n        <div className=\"rule\">\n          <div className=\"ruleColor\" style={{backgroundColor: rule}}></div>\n          <div onClick={() => props.toggle(rule)}>{props.rules[rule].dir}</div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Rules;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Grid from \"./components/Grid\";\nimport Rules from \"./components/Rules\";\n\nclass App extends Component {\n  state = {\n    rules: {\n      white: {\n        color: \"red\",\n        dir: \"left\"\n      },\n      red: {\n        color: \"yellow\",\n        dir: \"left\"\n      },\n      yellow: {\n        color: \"blue\",\n        dir: \"right\"\n      },\n      blue: {\n        color: \"orange\",\n        dir: \"left\"\n      },\n      orange: {\n        color: \"green\",\n        dir: \"right\"\n      },\n      green: {\n        color: \"purple\",\n        dir: \"right\"\n      },\n      purple: {\n        color: \"white\",\n        dir: \"left\"\n      }\n    },\n    running: false\n  };\n\n  componentDidMount() {}\n\n  toggle = (rule) => {\n    let state = {...this.state};\n    state.rules[rule].dir === \"left\" ? state.rules[rule].dir = \"right\" : state.rules[rule].dir = \"left\";\n    this.setState(state);\n  }\n\n  pause = () => {\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Grid rules={this.state.rules} running={this.state.running} />\n        <Rules toggle={this.toggle} rules={this.state.rules} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}