{"version":3,"sources":["logic.js","components/Grid.js","components/Rules.js","App.js","serviceWorker.js","index.js"],"names":["ctx","state","steps","grid","c","x","width","y","height","d","initGrid","i","j","go","running","document","getElementById","innerHTML","currentCell","color","rules","dir","fillStyle","fillRect","setTimeout","toggle","reset","canvas","clearRect","Grid","toggleRunning","resetCanvas","_this","_state","_canvas","this","refs","props","getContext","react_default","a","createElement","className","id","ref","onClick","Component","Rules","Object","keys","map","rule","key","style","backgroundColor","App","white","red","yellow","blue","orange","green","purple","speed","objectSpread","setState","components_Grid","components_Rules","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8IACIA,EAYAC,oFATAC,SAAQ,GACNC,EAAO,GAETC,EAAI,CACNC,EAAGC,IACHC,EAAGC,IACHC,EAAG,MAMCC,EAAW,WACf,IAAK,IAAIC,EAAI,EAAGA,EAdH,IAceA,IAAK,CAC/BR,EAAKQ,GAAK,GACV,IAAK,IAAIC,EAAI,EAAGA,EAhBL,IAgBiBA,IAC1BT,EAAKQ,GAAGC,GAAK,UAKbC,EAAK,SAALA,IACJ,GAAKZ,EAAMa,WACPZ,EAAQ,MACPC,EAAKC,EAAEC,IAAOF,EAAKC,EAAEC,GAAGD,EAAEG,GAA/B,CACAL,IACAa,SAASC,eAAe,SAASC,UAAYf,EAE7C,IAAMgB,EAAcf,EAAKC,EAAEC,GAAGD,EAAEG,GAC1BY,EAAQlB,EAAMmB,MAAMF,GAAaC,MACvChB,EAAKC,EAAEC,GAAGD,EAAEG,GAAKY,EACjB,IAAME,EAAMpB,EAAMmB,MAAMF,GAAaG,IACrCrB,EAAIsB,UAAYH,EAChBnB,EAAIuB,SA/BO,EA+BEnB,EAAEC,EA/BJ,EA+BYD,EAAEG,EA/Bd,KAgCC,OAARH,EAAEK,EACQ,SAARY,GACFjB,EAAEC,IACFD,EAAEK,EAAI,SAENL,EAAEC,IACFD,EAAEK,EAAI,SAES,SAARL,EAAEK,EACC,SAARY,GACFjB,EAAEC,IACFD,EAAEK,EAAI,UAENL,EAAEC,IACFD,EAAEK,EAAI,QAES,SAARL,EAAEK,EACC,SAARY,GACFjB,EAAEG,IACFH,EAAEK,EAAI,SAENL,EAAEG,IACFH,EAAEK,EAAI,MAGI,SAARY,GACFjB,EAAEG,IACFH,EAAEK,EAAI,OAENL,EAAEG,IACFH,EAAEK,EAAI,QAGNP,EAAQ,MAAS,EACnBsB,WAAWX,EAAI,GAEfA,MAMEY,EAAS,WACbxB,EAAMa,SAAWb,EAAMa,QACnBb,EAAMa,SACRD,KAIEa,EAAQ,SAACC,GACb1B,EAAMa,SAAU,EAChBZ,EAAQ,EACRQ,IACAV,EAAI4B,UAAU,EAAG,EAAGD,EAAOrB,MAAOqB,EAAOnB,QACzCJ,EAAI,CACFC,EAAGC,IACHC,EAAGC,IACHC,EAAG,OC5DQoB,6MAzBbC,cAAgB,WACdL,OAGFM,YAAc,WACZL,EAAMM,EAAKL,4FDqFD,IAACM,EAAQC,EC9FnBC,KAAKR,OAASQ,KAAKC,KAAKT,OD8FbM,EC7FLE,KAAKE,MAAMpC,MD6FEiC,EC7FKC,KAAKR,OD8F/B3B,EAAMkC,EAAQI,WAAW,MACzBrC,EAAQgC,EACRvB,IACAG,qCCrFE,OACE0B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,oBAEEF,EAAAC,EAAAC,cAAA,QAAME,GAAG,WAEXJ,EAAAC,EAAAC,cAAA,UAAQG,IAAI,SAAStC,MAAM,MAAME,OAAO,SAE1C+B,EAAAC,EAAAC,cAAA,UAAQI,QAASV,KAAKL,eAAtB,UACAS,EAAAC,EAAAC,cAAA,UAAQI,QAASV,KAAKJ,aAAtB,iBA1BWe,aCaJC,EAdD,SAAAV,GACZ,OACEE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,mBACCO,OAAOC,KAAKZ,EAAMjB,OAAO8B,IAAI,SAAAC,GAAI,OAChCZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOU,IAAKD,GACzBZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYW,MAAO,CAACC,gBAAiBH,KACpDZ,EAAAC,EAAAC,cAAA,OAAKI,QAAS,kBAAMR,EAAMZ,OAAO0B,KAAQd,EAAMjB,MAAM+B,GAAM9B,UCsDtDkC,6MAzDbtD,MAAQ,CACNmB,MAAO,CACLoC,MAAO,CACLrC,MAAO,MACPE,IAAK,QAEPoC,IAAK,CACHtC,MAAO,SACPE,IAAK,QAEPqC,OAAQ,CACNvC,MAAO,OACPE,IAAK,SAEPsC,KAAM,CACJxC,MAAO,SACPE,IAAK,QAEPuC,OAAQ,CACNzC,MAAO,QACPE,IAAK,SAEPwC,MAAO,CACL1C,MAAO,SACPE,IAAK,SAEPyC,OAAQ,CACN3C,MAAO,QACPE,IAAK,SAGTP,SAAS,EACTiD,MAAO,OAKTtC,OAAS,SAAC0B,GACR,IAAIlD,EAAK+C,OAAAgB,EAAA,EAAAhB,CAAA,GAAOhB,EAAK/B,OACK,SAA1BA,EAAMmB,MAAM+B,GAAM9B,IAAiBpB,EAAMmB,MAAM+B,GAAM9B,IAAM,QAAUpB,EAAMmB,MAAM+B,GAAM9B,IAAM,OAC7FW,EAAKiC,SAAShE,MAGhB6B,cAAgB,WACdE,EAAKiC,SAAS,CAAEnD,SAAUkB,EAAK/B,MAAMa,gIAIrC,OACEyB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACyB,EAAD,CAAMjE,MAAOkC,KAAKlC,MAAO6B,cAAeK,KAAKL,gBAC7CS,EAAAC,EAAAC,cAAC0B,EAAD,CAAO1C,OAAQU,KAAKV,OAAQL,MAAOe,KAAKlC,MAAMmB,gBApDpC0B,aCOEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAAS5D,SAASC,eAAe,SD2H3C,kBAAmB4D,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a3340230.chunk.js","sourcesContent":["\nlet ctx;\nconst width = 500;\nconst height = 500;\nlet steps = 0;\nconst grid = [];\nconst size = 1;\nlet c = {\n  x: width / size / 2,\n  y: height / size / 2,\n  d: \"up\"\n};\n\nlet state;\n\n\nconst initGrid = () => {\n  for (let i = 0; i < height; i++) {\n    grid[i] = [];\n    for (let j = 0; j < height; j++) {\n      grid[i][j] = \"white\";\n    }\n  }\n};\n\nconst go = () => {\n  if (!state.running) return;\n  if (steps > 10000000) return;\n  if (!grid[c.x] || !grid[c.x][c.y]) return;\n  steps++;\n  document.getElementById(\"steps\").innerHTML = steps;\n  // console.log(steps);\n  const currentCell = grid[c.x][c.y];\n  const color = state.rules[currentCell].color;\n  grid[c.x][c.y] = color;\n  const dir = state.rules[currentCell].dir;\n  ctx.fillStyle = color;\n  ctx.fillRect(c.x*size, c.y*size, size, size);\n  if (c.d === \"up\") {\n    if (dir === \"left\") {\n      c.x--;\n      c.d = \"left\";\n    } else {\n      c.x++;\n      c.d = \"right\";\n    }\n  } else if (c.d === \"down\") {\n    if (dir === \"left\") {\n      c.x++;\n      c.d = \"right\";\n    } else {\n      c.x--;\n      c.d = \"left\";\n    }\n  } else if (c.d === \"left\") {\n    if (dir === \"left\") {\n      c.y++;\n      c.d = \"down\";\n    } else {\n      c.y--;\n      c.d = \"up\";\n    }\n  } else {\n    if (dir === \"left\") {\n      c.y--;\n      c.d = \"up\";\n    } else {\n      c.y++;\n      c.d = \"down\";\n    }\n  }\n  if (steps % 1000 === 0) {\n    setTimeout(go, 1);\n  } else {\n    go();\n  }\n  \n};\n\n\nconst toggle = () => {\n  state.running = !state.running;\n  if (state.running) { \n    go();\n  } \n}\n\nconst reset = (canvas) => {\n  state.running = false;\n  steps = 0;\n  initGrid();\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  c = {\n    x: width / size / 2,\n    y: height / size / 2,\n    d: \"up\"\n  };\n}\n\n// drawGrid();\nconst start = (_state, _canvas) => {\n  ctx = _canvas.getContext(\"2d\");\n  state = _state;\n  initGrid();\n  go();\n}\n\nexport { start, toggle, reset };","import React, { Component } from \"react\";\nimport { start, toggle, reset, getSteps } from \"../logic\";\n\nclass Grid extends Component {\n\n  componentDidMount() {\n    this.canvas = this.refs.canvas;\n    start(this.props.state, this.canvas);\n  }\n\n  toggleRunning = () => {\n    toggle();\n  }\n\n  resetCanvas = () => {\n    reset(this.canvas);\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"Grid\">\n          <div>\n            steps:\n            <span id=\"steps\" />\n          </div>\n          <canvas ref=\"canvas\" width=\"500\" height=\"500\" />\n        </div>\n        <button onClick={this.toggleRunning}>Toggle</button>\n        <button onClick={this.resetCanvas}>Reset</button>\n      </div>\n    );\n  }\n}\n\nexport default Grid;\n","import React from \"react\";\n\nconst Rules = props => {\n  return (\n    <div className=\"Rules\">\n      <h1>Rules</h1>\n      {Object.keys(props.rules).map(rule => (\n        <div className=\"rule\" key={rule}>\n          <div className=\"ruleColor\" style={{backgroundColor: rule}}></div>\n          <div onClick={() => props.toggle(rule)}>{props.rules[rule].dir}</div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Rules;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Grid from \"./components/Grid\";\nimport Rules from \"./components/Rules\";\n\nclass App extends Component {\n  state = {\n    rules: {\n      white: {\n        color: \"red\",\n        dir: \"left\"\n      },\n      red: {\n        color: \"yellow\",\n        dir: \"left\"\n      },\n      yellow: {\n        color: \"blue\",\n        dir: \"right\"\n      },\n      blue: {\n        color: \"orange\",\n        dir: \"left\"\n      },\n      orange: {\n        color: \"green\",\n        dir: \"right\"\n      },\n      green: {\n        color: \"purple\",\n        dir: \"right\"\n      },\n      purple: {\n        color: \"white\",\n        dir: \"left\"\n      }\n    },\n    running: true,\n    speed: 100\n  };\n\n  componentDidMount() {}\n\n  toggle = (rule) => {\n    let state = {...this.state};\n    state.rules[rule].dir === \"left\" ? state.rules[rule].dir = \"right\" : state.rules[rule].dir = \"left\";\n    this.setState(state);\n  }\n\n  toggleRunning = () => {\n    this.setState({ running: !this.state.running });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Grid state={this.state} toggleRunning={this.toggleRunning}/>\n        <Rules toggle={this.toggle} rules={this.state.rules} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}